package esame2010;

import java.util.*;

public class SelezionatoreAutoriProlifici implements Selezionatore {
	public List<Autore> eseguiSelezione(List<Libro> libriInBiblioteca) {
		Map<Autore, Set<Libro>> autore2libri = new HashMap<>();
		ValueComparator bvc = new ValueComparator(autore2libri);
		TreeMap<Autore, Set<Libro>> sorted_map = new TreeMap<Autore, Set<Libro>>(bvc);
		for (Libro libro : libriInBiblioteca) {
			Set<Autore> temp = libro.getAutori();
			for (Autore autor : temp) {
				if (autore2libri.containsKey(autor)) {
					Set<Libro> autorelibro = autore2libri.get(autor);
					autorelibro.add(libro);
				} else {
					Set<Libro> autorelibro = new HashSet<>();
					autorelibro.add(libro);
					autore2libri.put(autor, autorelibro);
				}
			}
		}
		sorted_map.putAll(autore2libri);
		int maxLibri = 0;
		for (Set<Libro> item : autore2libri.values()) {
			if (item.size() > maxLibri)
				maxLibri = item.size();
		}
		List<Autore> res = new ArrayList<Autore>();
		for (Autore item : sorted_map.keySet()) {
			if (sorted_map.get(item).size() == maxLibri)
				res.add(item);
		}
		return res;
	}
}

class ValueComparator implements Comparator<Autore> {

	Map<Autore, Set<Libro>> base;

	public ValueComparator(Map<Autore, Set<Libro>> base) {
		this.base = base;
	}

	// Note: this comparator imposes orderings that are inconsistent with
	// equals.
	public int compare(Autore a, Autore b) {
		return a.getNome().compareTo(b.getNome());
	}
}
